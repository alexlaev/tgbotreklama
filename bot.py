# bot.py - –ü–û–õ–ù–û–°–¢–¨–Æ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ú–ï–ù–Æ –ö–û–ú–ê–ù–î

import logging
from dotenv import load_dotenv

load_dotenv()

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    PreCheckoutQueryHandler,
    ConversationHandler,
    ContextTypes,
)

from warnings import filterwarnings
from telegram.warnings import PTBUserWarning

filterwarnings(action="ignore", message=r".*CallbackQueryHandler", category=PTBUserWarning)

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
from config.config import load_config
from config.settings import UserState, MESSAGES, KEYBOARDS, PACKAGE_PRICING
from database.db_manager import DatabaseManager
from handlers.admin_handlers import AdminHandlers
from handlers.user_handlers import UserHandlers
from handlers.payment_handlers import PaymentHandlers
from services.payment_service import PaymentService
from services.scheduler import PublicationScheduler
from services.filter_service import StopWordsFilter

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class TelegramBot:
    def __init__(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.bot_config, self.db_config, self.payment_config, self.pricing_config = load_config()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.db_manager = DatabaseManager(
            database_url=self.db_config.database_url,
            echo=self.db_config.echo if hasattr(self.db_config, 'echo') else False
        )
        self.db_manager.create_tables()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        self.payment_service = PaymentService(self.db_manager)
        self.filter_service = StopWordsFilter(self.db_manager)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.admin_handlers = AdminHandlers(self.db_manager)
        self.user_handlers = UserHandlers(self.db_manager)
        self.payment_handlers = PaymentHandlers(self.db_manager, self.payment_service)

        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ event loop
        self.scheduler = None

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(self.bot_config.bot_token).build()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ bot_data
        self.application.bot_data['payment_provider_token'] = self.payment_config.provider_token
        self.application.bot_data['group_id'] = self.bot_config.group_id

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._register_handlers()

    async def setup_bot_commands(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        commands = [
            BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand(command="help", description="üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É"),
            BotCommand(command="balance", description="üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å"),
            BotCommand(command="shop", description="üõí –ú–∞–≥–∞–∑–∏–Ω")
        ]

        try:
            await self.application.bot.set_my_commands(commands)
            logger.info("–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥: {e}")

    async def _help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """ü§ñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É*

–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–ª–∞—Ç–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ –≥—Ä—É–ø–ø–µ ¬´–†–∞–±–æ—Ç–∞ –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∏–π –∫—Ä–∞–π¬ª.

*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
üì¢ *–†–µ–∫–ª–∞–º–∞* - —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π (160‚ÇΩ)
üíº *–û–±—ä—è–≤–ª–µ–Ω–∏—è –æ —Ä–∞–±–æ—Ç–µ* - –ø–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –≤–∞–∫–∞–Ω—Å–∏–π (100‚ÇΩ)
üí∞ *–ë–∞–ª–∞–Ω—Å* - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞—à–µ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
üõí *–ú–∞–≥–∞–∑–∏–Ω* - –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞

*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
üîÑ *–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥* - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å –∑–∞–¥–∞–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å—é
üíé *–ü–∞–∫–µ—Ç–Ω—ã–µ —Å–∫–∏–¥–∫–∏* - —ç–∫–æ–Ω–æ–º–∏—è –¥–æ 20% –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π

*–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start*
        """

        keyboard = [[InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(help_text, reply_markup=reply_markup, parse_mode='Markdown')

    async def _balance_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance"""
        user_id = update.effective_user.id
        balance = self.db_manager.get_user_balance(user_id)

        text = f"üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å:* {int(balance)} —Ä—É–±–ª–µ–π"

        keyboard = [
            [InlineKeyboardButton("üõí –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="menu_–º–∞–≥–∞–∑–∏–Ω")],
            [InlineKeyboardButton("üì¢ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∫–ª–∞–º—É", callback_data="menu_—Ä–µ–∫–ª–∞–º–∞")],
            [InlineKeyboardButton("üíº –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="menu_–æ–±—ä—è–≤–ª–µ–Ω–∏–µ_–æ_—Ä–∞–±–æ—Ç–µ")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

    async def _shop_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /shop"""
        user_id = update.effective_user.id
        balance = self.db_manager.get_user_balance(user_id)

        text = f"üõí *–ú–∞–≥–∞–∑–∏–Ω*\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: {int(balance)} —Ä—É–±–ª–µ–π\n\n–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –ø–æ–∫—É–ø–∞–µ–º:"

        keyboard = [
            [InlineKeyboardButton("üì¢ –ü–∞–∫–µ—Ç—ã –¥–ª—è —Ä–µ–∫–ª–∞–º—ã", callback_data="shop_advertisement")],
            [InlineKeyboardButton("üíº –ü–∞–∫–µ—Ç—ã –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π", callback_data="shop_job")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.user_handlers.start_command))
        self.application.add_handler(CommandHandler("help", self._help_command))
        self.application.add_handler(CommandHandler("balance", self._balance_command))
        self.application.add_handler(CommandHandler("shop", self._shop_command))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(
            self.user_handlers.info_publications,
            pattern="^info_publications$"
        ))

        self.application.add_handler(CallbackQueryHandler(
            self.user_handlers.show_main_menu,
            pattern="^main_menu$"
        ))

        # –ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.application.add_handler(CallbackQueryHandler(
            self.user_handlers.show_balance,
            pattern="^menu_–±–∞–ª–∞–Ω—Å$"
        ))

        self.application.add_handler(CallbackQueryHandler(
            self.user_handlers.show_shop,
            pattern="^menu_–º–∞–≥–∞–∑–∏–Ω$"
        ))

        self.application.add_handler(CallbackQueryHandler(
            self.user_handlers.start_advertisement,
            pattern="^menu_—Ä–µ–∫–ª–∞–º–∞$"
        ))

        self.application.add_handler(CallbackQueryHandler(
            self.user_handlers.start_job_posting,
            pattern="^menu_–æ–±—ä—è–≤–ª–µ–Ω–∏–µ_–æ_—Ä–∞–±–æ—Ç–µ$"
        ))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ñ–∏—Ä–º—ã
        self.application.add_handler(CallbackQueryHandler(
            self.user_handlers.process_firm_type,
            pattern="^firm_type_"
        ))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–∏–ø–æ–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ —Ä–∞–±–æ—Ç–µ
        self.application.add_handler(CallbackQueryHandler(
            self.user_handlers.start_job_search_employee,
            pattern="^job_search_employee$"
        ))

        self.application.add_handler(CallbackQueryHandler(
            self.user_handlers.start_job_search_work,
            pattern="^job_search_work$"
        ))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥"
        self.application.add_handler(CallbackQueryHandler(
            self.user_handlers.back_to_firm_type,
            pattern="^back_to_firm_type$"
        ))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        self.application.add_handler(CallbackQueryHandler(
            self.user_handlers.show_publication_options,
            pattern="^review_publication$"
        ))

        self.application.add_handler(CallbackQueryHandler(
            self.user_handlers.publish_immediately,
            pattern="^publish_immediately$"
        ))

        # –ê–í–¢–û–ü–û–°–¢–ò–ù–ì - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CallbackQueryHandler(
            self.user_handlers.auto_posting,
            pattern="^auto_posting$"
        ))

        self.application.add_handler(CallbackQueryHandler(
            self.user_handlers.process_frequency_choice,
            pattern="^frequency_(daily|weekly)$"
        ))

        self.application.add_handler(CallbackQueryHandler(
            self.user_handlers.process_weekday_choice,
            pattern="^weekday_[0-6]$"
        ))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
        self.application.add_handler(CallbackQueryHandler(
            self.user_handlers.back_to_repetitions_input,
            pattern="^back_to_repetitions$"
        ))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤–≤–æ–¥—É –≤—Ä–µ–º–µ–Ω–∏
        self.application.add_handler(CallbackQueryHandler(
            self.user_handlers.back_to_time_input,
            pattern="^back_to_time_input$"
        ))

        # –û–¢–õ–û–ñ–ï–ù–ù–ê–Ø –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CallbackQueryHandler(
            self.user_handlers.delayed_publication,
            pattern="^delayed_publication$"
        ))

        self.application.add_handler(CallbackQueryHandler(
            self.user_handlers.process_delayed_slot_choice,
            pattern="^delayed_slot_[1-3]$"
        ))

        self.application.add_handler(CallbackQueryHandler(
            self.user_handlers.remove_delayed_slot,
            pattern="^remove_delayed_slot_[1-3]$"
        ))

        self.application.add_handler(CallbackQueryHandler(
            self.user_handlers.confirm_delayed_publication,
            pattern="^confirm_delayed_publication$"
        ))

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã-–≤—Ä–µ–º–µ–Ω–∏
        self.application.add_handler(CallbackQueryHandler(
            self.user_handlers.retry_datetime_input,
            pattern="^retry_datetime_input$"
        ))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        self.application.add_handler(CallbackQueryHandler(
            self.user_handlers.handle_insufficient_balance,
            pattern="^insufficient_balance$"
        ))

        # –ê–¥–º–∏–Ω—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CallbackQueryHandler(
            self.admin_handlers.show_stop_words,
            pattern="^admin_–ø—Ä–æ–≤–µ—Ä–∏—Ç—å_—Å–ø–∏—Å–æ–∫_—Å—Ç–æ–ø_—Å–ª–æ–≤$"
        ))

        self.application.add_handler(CallbackQueryHandler(
            self.admin_handlers.add_stop_words_prompt,
            pattern="^admin_–¥–æ–±–∞–≤–∏—Ç—å_—Å—Ç–æ–ø_—Å–ª–æ–≤–∞$"
        ))

        self.application.add_handler(CallbackQueryHandler(
            self.admin_handlers.clear_stop_words,
            pattern="^admin_–æ—á–∏—Å—Ç–∏—Ç—å_—Å–ø–∏—Å–æ–∫_—Å—Ç–æ–ø_—Å–ª–æ–≤$"
        ))

        self.application.add_handler(CallbackQueryHandler(
            self.admin_handlers.admin_create_publication,
            pattern="^admin_—Å–æ–∑–¥–∞—Ç—å_–ø—É–±–ª–∏–∫–∞—Ü–∏—é$"
        ))

        self.application.add_handler(CallbackQueryHandler(
            self.admin_handlers.admin_back_to_main,
            pattern="^admin_back_to_main$"
        ))

        self.application.add_handler(CallbackQueryHandler(
            self.admin_handlers.admin_cancel,
            pattern="^admin_cancel$"
        ))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
        self.application.add_handler(CallbackQueryHandler(
            self.payment_handlers.shop_advertisement_scenario,
            pattern="^shop_advertisement$"
        ))

        self.application.add_handler(CallbackQueryHandler(
            self.payment_handlers.shop_job_scenario,
            pattern="^shop_job$"
        ))

        self.application.add_handler(CallbackQueryHandler(
            self.payment_handlers.initiate_payment,
            pattern="^pay_"
        ))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        self.application.add_handler(PreCheckoutQueryHandler(
            self.payment_handlers.precheckout_callback
        ))

        self.application.add_handler(MessageHandler(
            filters.SUCCESSFUL_PAYMENT,
            self.payment_handlers.successful_payment_callback
        ))

        # ConversationHandler –¥–ª—è —Å—Ç–æ–ø-—Å–ª–æ–≤
        stop_words_conv = ConversationHandler(
            entry_points=[CallbackQueryHandler(
                self.admin_handlers.add_stop_words_prompt,
                pattern="^admin_–¥–æ–±–∞–≤–∏—Ç—å_—Å—Ç–æ–ø_—Å–ª–æ–≤–∞$"
            )],
            states={
                "WAITING_STOP_WORDS": [MessageHandler(
                    filters.TEXT & ~filters.COMMAND,
                    self.admin_handlers.process_stop_words
                )]
            },
            fallbacks=[CallbackQueryHandler(
                self.admin_handlers.admin_cancel,
                pattern="^admin_cancel$"
            )],
            per_message=False
        )

        self.application.add_handler(stop_words_conv)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            self._handle_text_message
        ))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        self.application.add_handler(MessageHandler(
            filters.CONTACT,
            self._handle_contact
        ))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self._error_handler)

    async def _handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        state = self.db_manager.get_user_state(user_id)

        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")

        try:
            if state == "waiting_stop_words":
                await self.admin_handlers.process_stop_words(update, context)
            elif state in ["entering_payment_amount_ad", "entering_payment_amount_job"]:
                await self.payment_handlers.process_payment_amount(update, context)
            elif state == UserState.ENTERING_FIRM_NAME.value:
                await self.user_handlers.process_firm_name(update, context)
            elif state == UserState.ENTERING_AD_TEXT.value:
                await self.user_handlers.process_ad_text(update, context)
            elif state == UserState.ENTERING_JOB_TITLE.value:
                await self.user_handlers.process_job_title(update, context)
            elif state == UserState.ENTERING_WORKER_COUNT.value:
                await self.user_handlers.process_worker_count(update, context)
            elif state == UserState.ENTERING_WORK_PERIOD.value:
                await self.user_handlers.process_work_period(update, context)
            elif state == UserState.ENTERING_WORK_CONDITIONS.value:
                await self.user_handlers.process_work_conditions(update, context)
            elif state == UserState.ENTERING_REQUIREMENTS.value:
                await self.user_handlers.process_requirements(update, context)
            elif state == UserState.ENTERING_SALARY.value:
                await self.user_handlers.process_salary(update, context)
            elif state == UserState.ENTERING_CONTACTS.value:
                await self.user_handlers.process_contacts(update, context)
            elif state == UserState.ENTERING_TIME.value:
                await self.user_handlers.process_time_input(update, context)
            elif state == UserState.ENTERING_REPETITIONS.value:
                await self.user_handlers.process_repetitions_input(update, context)
            elif state == UserState.ENTERING_DELAYED_DATETIME.value:
                await self.user_handlers.process_delayed_datetime_input(update, context)
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

    async def _handle_contact(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        try:
            contact = update.message.contact
            user_id = update.effective_user.id

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ —Å–µ—Å—Å–∏–∏
            session_data = self.db_manager.get_session_data(user_id)
            session_data['contacts'] = f"+{contact.phone_number}"
            self.db_manager.save_session_data(user_id, session_data)

            await self.user_handlers.review_publication(update, context)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

    async def _error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {update}: {context.error}")

        try:
            if update and update.effective_message:
                keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="main_menu")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.effective_message.reply_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    reply_markup=reply_markup
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ error_handler: {e}")

    async def on_startup(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ event loop"""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
            await self.setup_bot_commands()

            self.scheduler = PublicationScheduler(
                self.db_manager,
                self.application.bot,
                self.bot_config.group_id
            )
            self.user_handlers.set_scheduler(self.scheduler)
            logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            logger.info("‚úÖ –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

    async def on_shutdown(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
        try:
            if self.scheduler:
                self.scheduler.shutdown()
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

    def run_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        import asyncio

        async def main():
            try:
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ event loop
                await self.on_startup()

                # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
                await self.application.initialize()
                await self.application.start()
                await self.application.updater.start_polling()
                logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
                logger.info("üìã –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")

                # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
                try:
                    while True:
                        await asyncio.sleep(1)
                except KeyboardInterrupt:
                    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")

            except Exception as e:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            finally:
                # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
                await self.on_shutdown()
                if self.application.updater.running:
                    await self.application.updater.stop()
                if self.application.running:
                    await self.application.stop()
                await self.application.shutdown()
                logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        # –ó–∞–ø—É—Å–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        try:
            asyncio.run(main())
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã")
        except Exception as e:
            logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    try:
        bot = TelegramBot()
        bot.run_bot()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: {e}")
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")