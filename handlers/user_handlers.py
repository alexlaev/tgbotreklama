from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, \
    ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler
from datetime import datetime, timedelta
import re
import os
import logging

from database.db_manager import DatabaseManager
from config.settings import (
    MESSAGES, KEYBOARDS, UserState, FirmType, PACKAGE_PRICING,
    DELAYED_BALANCE_REQUIREMENTS, FORMATS, WEEKDAY_NAMES, ERROR_MESSAGES
)
from services.filter_service import StopWordsFilter
from services.scheduler import PublicationScheduler

logger = logging.getLogger(__name__)


class UserHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    def __init__(self, db_manager: DatabaseManager):
        self.db = db_manager
        self.filter_service = StopWordsFilter(db_manager)
        self.scheduler = None

    def set_scheduler(self, scheduler: PublicationScheduler):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self.scheduler = scheduler

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_user = self.db.get_or_create_user(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if self.db.is_user_admin(user.id):
            from .admin_handlers import AdminHandlers
            admin_handlers = AdminHandlers(self.db)
            await admin_handlers.admin_start(update, context)
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            keyboard = [[InlineKeyboardButton(
                "–°–æ–∑–¥–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é",
                callback_data="main_menu"
            )]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                MESSAGES["welcome_user"],
                reply_markup=reply_markup
            )

    async def info_publications(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö"""
        query = update.callback_query
        await query.answer()

        keyboard = [[InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            MESSAGES["info_accepted"],
            reply_markup=reply_markup
        )

    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        if update.callback_query:
            query = update.callback_query
            await query.answer()

            keyboard = [
                [InlineKeyboardButton("üì¢ –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã", callback_data="menu_—Ä–µ–∫–ª–∞–º–∞")],
                [InlineKeyboardButton("üíº –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ —Ä–∞–±–æ—Ç–µ", callback_data="menu_–æ–±—ä—è–≤–ª–µ–Ω–∏–µ_–æ_—Ä–∞–±–æ—Ç–µ")],
                [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="menu_–±–∞–ª–∞–Ω—Å"),
                 InlineKeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data="menu_–º–∞–≥–∞–∑–∏–Ω")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                MESSAGES["choose_action"],
                reply_markup=reply_markup
            )
        else:
            keyboard = [
                [InlineKeyboardButton("üì¢ –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã", callback_data="menu_—Ä–µ–∫–ª–∞–º–∞")],
                [InlineKeyboardButton("üíº –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ —Ä–∞–±–æ—Ç–µ", callback_data="menu_–æ–±—ä—è–≤–ª–µ–Ω–∏–µ_–æ_—Ä–∞–±–æ—Ç–µ")],
                [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="menu_–±–∞–ª–∞–Ω—Å"),
                 InlineKeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data="menu_–º–∞–≥–∞–∑–∏–Ω")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                MESSAGES["choose_action"],
                reply_markup=reply_markup
            )

    async def show_balance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = update.callback_query
        await query.answer()

        user_id = update.effective_user.id
        balance = self.db.get_user_balance(user_id)

        text = MESSAGES["balance_info"].format(balance=int(balance))

        keyboard = [
            [InlineKeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data="menu_–º–∞–≥–∞–∑–∏–Ω")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(text, reply_markup=reply_markup)

    async def show_shop(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω"""
        query = update.callback_query
        await query.answer()

        user_id = update.effective_user.id
        balance = self.db.get_user_balance(user_id)

        text = f"–í–∞—à –±–∞–ª–∞–Ω—Å: {int(balance)} —Ä—É–±–ª–µ–π\n–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –ø–æ–∫—É–ø–∞–µ–º:"

        keyboard = [
            [InlineKeyboardButton("üì¢ –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã", callback_data="shop_advertisement")],
            [InlineKeyboardButton("üíº –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ —Ä–∞–±–æ—Ç–µ", callback_data="shop_job")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(text, reply_markup=reply_markup)

    async def start_advertisement(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã"""
        query = update.callback_query
        await query.answer()

        user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –∏–ª–∏ –±–∞–ª–∞–Ω—Å
        if not self.db.is_user_admin(user_id):
            balance = self.db.get_user_balance(user_id)
            if balance < 160:
                # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –º–∞–≥–∞–∑–∏–Ω
                from .payment_handlers import PaymentHandlers
                payment_handlers = PaymentHandlers(self.db, None)
                await payment_handlers.shop_advertisement_scenario(update, context)
                return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ñ–∏—Ä–º—ã
        await self.choose_firm_type(update, context, "advertisement")

    async def start_job_posting(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ —Ä–∞–±–æ—Ç–µ"""
        query = update.callback_query
        await query.answer()

        user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –∏–ª–∏ –±–∞–ª–∞–Ω—Å
        if not self.db.is_user_admin(user_id):
            balance = self.db.get_user_balance(user_id)
            if balance < 100:
                # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –º–∞–≥–∞–∑–∏–Ω
                from .payment_handlers import PaymentHandlers
                payment_handlers = PaymentHandlers(self.db, None)
                await payment_handlers.shop_job_scenario(update, context)
                return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("üë• –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", callback_data="job_search_employee")],
            [InlineKeyboardButton("üíº –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã", callback_data="job_search_work")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )

    async def start_job_search_employee(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        await self.choose_firm_type(update, context, "job_offer")

    async def start_job_search_work(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã"""
        await self.choose_firm_type(update, context, "job_search")

    async def choose_firm_type(self, update: Update, context: ContextTypes.DEFAULT_TYPE, pub_type: str):
        """–í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ñ–∏—Ä–º—ã"""
        if update.callback_query:
            query = update.callback_query
            await query.answer()

            user_id = update.effective_user.id

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Å–µ—Å—Å–∏–∏
            session_data = self.db.get_session_data(user_id)
            session_data['publication_type'] = pub_type
            self.db.save_session_data(user_id, session_data)

            keyboard = [
                [InlineKeyboardButton("–ò–ü", callback_data="firm_type_–ò–ü")],
                [InlineKeyboardButton("–§–ò–ó –õ–ò–¶–û", callback_data="firm_type_–§–ò–ó –õ–ò–¶–û")],
                [InlineKeyboardButton("–Æ–† –õ–ò–¶–û", callback_data="firm_type_–Æ–† –õ–ò–¶–û")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            text = "–û—Ç –∫–∞–∫–æ–≥–æ –ª–∏—Ü–∞ –±—É–¥–µ—Ç –∏–¥—Ç–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ:"
            await query.edit_message_text(text, reply_markup=reply_markup)
            self.db.update_user_state(update.effective_user.id, UserState.CHOOSING_FIRM_TYPE.value)

    async def process_firm_type(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ñ–∏—Ä–º—ã"""
        query = update.callback_query
        await query.answer()

        user_id = update.effective_user.id
        firm_type = query.data.split("_")[-1]

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Ç–∏–ø —Ñ–∏—Ä–º—ã: {firm_type}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Ñ–∏—Ä–º—ã –≤ —Å–µ—Å—Å–∏–∏
        session_data = self.db.get_session_data(user_id)
        session_data['firm_type'] = firm_type
        self.db.save_session_data(user_id, session_data)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏—Ä–º—ã
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_firm_type")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏—Ä–º—ã:",
            reply_markup=reply_markup
        )
        self.db.update_user_state(user_id, UserState.ENTERING_FIRM_NAME.value)

    async def back_to_firm_type(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Ñ–∏—Ä–º—ã"""
        query = update.callback_query
        await query.answer()

        user_id = update.effective_user.id
        session_data = self.db.get_session_data(user_id)
        pub_type = session_data.get('publication_type', 'advertisement')

        await self.choose_firm_type(update, context, pub_type)

    async def process_firm_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏—Ä–º—ã"""
        user_id = update.effective_user.id
        firm_name = update.message.text

        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏—Ä–º—ã '{firm_name}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏—Ä–º—ã
        session_data = self.db.get_session_data(user_id)
        session_data['firm_name'] = firm_name
        self.db.save_session_data(user_id, session_data)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        pub_type = session_data.get('publication_type', 'advertisement')

        if pub_type == 'advertisement':
            next_text = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:"
            next_state = UserState.ENTERING_AD_TEXT.value
        elif pub_type == 'job_offer':
            next_text = """–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏/—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –∏—â–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:
–ú–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–π https://–æ–∫–ø–¥—Ç—Ä.—Ä—Ñ/"""
            next_state = UserState.ENTERING_JOB_TITLE.value
        else:  # job_search
            next_text = """–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏/—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç—Ä–æ–∏—Ç—å—Å—è:
–ú–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–π https://–æ–∫–ø–¥—Ç—Ä.—Ä—Ñ/"""
            next_state = UserState.ENTERING_JOB_TITLE.value

        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="back_to_firm_type")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(next_text, reply_markup=reply_markup)
        self.db.update_user_state(user_id, next_state)

    async def process_ad_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∫–ª–∞–º—ã"""
        user_id = update.effective_user.id
        ad_text = update.message.text

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã
        session_data = self.db.get_session_data(user_id)
        session_data['ad_text'] = ad_text
        self.db.save_session_data(user_id, session_data)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        keyboard = [
            [KeyboardButton("üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="back_to_firm_type")]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard[1:])  # –¢–æ–ª—å–∫–æ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è reply_markup

        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à(–∏) –∫–æ–Ω—Ç–∞–∫—Ç(—ã), –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:",
            reply_markup=reply_markup
        )

        # –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–∞
        contact_markup = ReplyKeyboardMarkup([[keyboard[0][0]]], one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text(
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=contact_markup
        )

        self.db.update_user_state(user_id, UserState.ENTERING_CONTACTS.value)

    async def process_job_title(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏"""
        user_id = update.effective_user.id
        job_title = update.message.text

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
        session_data = self.db.get_session_data(user_id)
        session_data['job_title'] = job_title
        pub_type = session_data.get('publication_type')
        self.db.save_session_data(user_id, session_data)

        if pub_type == 'job_offer':
            next_text = "–£–∫–∞–∂–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:"
            next_state = UserState.ENTERING_WORKER_COUNT.value
        else:  # job_search
            next_text = "–ù–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞?"
            next_state = UserState.ENTERING_WORK_PERIOD.value

        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="back_to_firm_type")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(next_text, reply_markup=reply_markup)
        self.db.update_user_state(user_id, next_state)

    async def process_worker_count(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤"""
        user_id = update.effective_user.id
        worker_count = update.message.text

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
        session_data = self.db.get_session_data(user_id)
        session_data['worker_count'] = worker_count
        self.db.save_session_data(user_id, session_data)

        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="back_to_firm_type")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "–ù–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–±—É—é—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏?",
            reply_markup=reply_markup
        )
        self.db.update_user_state(user_id, UserState.ENTERING_WORK_PERIOD.value)

    async def process_work_period(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–∏–æ–¥–∞ —Ä–∞–±–æ—Ç—ã"""
        user_id = update.effective_user.id
        work_period = update.message.text

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–∏–æ–¥ —Ä–∞–±–æ—Ç—ã
        session_data = self.db.get_session_data(user_id)
        session_data['work_period'] = work_period
        self.db.save_session_data(user_id, session_data)

        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="back_to_firm_type")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "–û–ø–∏—à–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã, —Ö–∞—Ä–∞–∫—Ç–µ—Ä, —É—Å–ª–æ–≤–∏—è:",
            reply_markup=reply_markup
        )
        self.db.update_user_state(user_id, UserState.ENTERING_WORK_CONDITIONS.value)

    async def process_work_conditions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ª–æ–≤–∏–π —Ä–∞–±–æ—Ç—ã"""
        user_id = update.effective_user.id
        work_conditions = update.message.text

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã
        session_data = self.db.get_session_data(user_id)
        session_data['work_conditions'] = work_conditions
        self.db.save_session_data(user_id, session_data)

        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="back_to_firm_type")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "–û–ø–∏—à–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–µ—Ç–µ–Ω–¥–µ–Ω—Ç–∞–º:",
            reply_markup=reply_markup
        )
        self.db.update_user_state(user_id, UserState.ENTERING_REQUIREMENTS.value)

    async def process_requirements(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
        user_id = update.effective_user.id
        requirements = update.message.text

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        session_data = self.db.get_session_data(user_id)
        session_data['requirements'] = requirements
        self.db.save_session_data(user_id, session_data)

        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="back_to_firm_type")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∑–ø –∏ —É—Å–ª–æ–≤–∏—è:",
            reply_markup=reply_markup
        )
        self.db.update_user_state(user_id, UserState.ENTERING_SALARY.value)

    async def process_salary(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã"""
        user_id = update.effective_user.id
        salary = update.message.text

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É
        session_data = self.db.get_session_data(user_id)
        session_data['salary'] = salary
        self.db.save_session_data(user_id, session_data)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        keyboard = [
            [KeyboardButton("üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="back_to_firm_type")]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard[1:])

        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à(–∏) –∫–æ–Ω—Ç–∞–∫—Ç(—ã), –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:",
            reply_markup=reply_markup
        )

        # –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–∞
        contact_markup = ReplyKeyboardMarkup([[keyboard[0][0]]], one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text(
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=contact_markup
        )

        self.db.update_user_state(user_id, UserState.ENTERING_CONTACTS.value)

    async def process_contacts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        user_id = update.effective_user.id
        contacts = update.message.text

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
        session_data = self.db.get_session_data(user_id)
        session_data['contacts'] = contacts
        self.db.save_session_data(user_id, session_data)

        await self.review_publication(update, context)

    async def review_publication(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        user_id = update.effective_user.id
        session_data = self.db.get_session_data(user_id)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        publication_text = self.format_publication_text(session_data)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
        has_stop_words, stop_words = self.filter_service.check_text(publication_text)

        if has_stop_words:
            # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–∞
            await update.message.reply_text(
                MESSAGES["stop_words_found"],
                reply_markup=ReplyKeyboardRemove()
            )

            keyboard = [[InlineKeyboardButton("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ", callback_data="back_to_firm_type")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                f"–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –∏–∑–±–µ–≥–∞—Ç—å –°–¢–û–ü-–°–õ–û–í: {stop_words} ",
                reply_markup=reply_markup
            )
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="back_to_firm_type")],
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="review_publication")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            f"–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:\n\n{publication_text}",
            reply_markup=ReplyKeyboardRemove()
        )

        await update.message.reply_text(
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—é:",
            reply_markup=reply_markup
        )

        self.db.update_user_state(user_id, UserState.REVIEWING_POST.value)

    async def show_publication_options(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        query = update.callback_query
        await query.answer()

        keyboard = [
            [InlineKeyboardButton("üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É", callback_data="publish_immediately")],
            #[InlineKeyboardButton("‚è∞ –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è", callback_data="delayed_publication")],
            [InlineKeyboardButton("üîÑ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥", callback_data="auto_posting")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

    async def publish_immediately(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É"""
        query = update.callback_query
        await query.answer()

        user_id = update.effective_user.id
        session_data = self.db.get_session_data(user_id)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ü–†–ê–í–ò–õ–¨–ù–û –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        pub_type = session_data.get('publication_type', 'advertisement')
        if pub_type == 'advertisement':
            cost = 160  # –†–µ–∫–ª–∞–º–∞ —Å—Ç–æ–∏—Ç 160 —Ä—É–±–ª–µ–π
        else:  # job_offer –∏–ª–∏ job_search
            cost = 100  # –û–±—ä—è–≤–ª–µ–Ω–∏—è –æ —Ä–∞–±–æ—Ç–µ —Å—Ç–æ—è—Ç 100 —Ä—É–±–ª–µ–π

        logger.info(f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–∏–ø–∞ {pub_type}, —Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å (–µ—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω)
        if not self.db.is_user_admin(user_id):
            if not self.db.check_balance(user_id, cost):
                await query.edit_message_text(
                    f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è: {cost} —Ä—É–±–ª–µ–π",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üõí –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="menu_–º–∞–≥–∞–∑–∏–Ω")
                    ]])
                )
                return

            # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
            self.db.update_balance(user_id, -cost)
            logger.info(f"–°–ø–∏—Å–∞–Ω–æ {cost} —Ä—É–±–ª–µ–π —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –ø—É–±–ª–∏–∫—É–µ–º
        publication_text = self.format_publication_text(session_data)

        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            image_path = self._get_image_path_for_publication(pub_type)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
            bot = context.bot
            group_id = context.bot_data.get('group_id', -1002850839936)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if os.path.exists(image_path):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤ –≥—Ä—É–ø–ø—É
                with open(image_path, 'rb') as photo:
                    message = await bot.send_photo(
                        chat_id=group_id,
                        photo=photo,
                        caption=publication_text,
                        parse_mode='HTML'
                    )
            else:
                # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                logger.warning(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
                message = await bot.send_message(
                    chat_id=group_id,
                    text=publication_text,
                    parse_mode='HTML'
                )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            publication_id = self.db.create_publication(
                user_id=user_id,
                pub_type=pub_type,
                text=publication_text,
                cost=cost,
                firm_type=session_data.get('firm_type'),
                firm_name=session_data.get('firm_name')
            )

            self.db.update_publication_status(
                publication_id=publication_id,
                status='published',
                message_id=message.message_id
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            pub_type_text = "—Ä–µ–∫–ª–∞–º–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ" if pub_type == 'advertisement' else "–æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–µ"
            time_str = datetime.now().strftime("%d.%m.%Y –≤ %H:%M")
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="main_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                f"‚úÖ –í–∞—à–µ {pub_type_text} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ {time_str}",
                reply_markup=reply_markup
            )

            # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
            self.db.clear_session_data(user_id)
            self.db.update_user_state(user_id, UserState.IDLE.value)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="main_menu")
                ]])
            )

    # –ê–í–¢–û–ü–û–°–¢–ò–ù–ì - –ø–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
    async def auto_posting(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ - –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏"""
        query = update.callback_query

        user_id = update.effective_user.id
        session_data = self.db.get_session_data(user_id)
        pub_type = session_data.get('publication_type', 'advertisement')
        await query.answer()

        keyboard = [
            [InlineKeyboardButton("–†–∞–∑ –≤ —Å—É—Ç–∫–∏", callback_data="frequency_daily")],
            [InlineKeyboardButton("–†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é", callback_data="frequency_weekly")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="review_publication")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        typecal_text = "–¥–æ–ª–∂–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è —Ä–µ–∫–ª–∞–º–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ" if pub_type == 'advertisement' else "–¥–æ–ª–∂–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–µ"
        await query.edit_message_text(
            f"–° –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å—é {typecal_text}?",
            reply_markup=reply_markup
        )

        user_id = update.effective_user.id
        self.db.update_user_state(user_id, UserState.CHOOSING_AUTOPOST_FREQUENCY.value)

    async def process_frequency_choice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏"""
        query = update.callback_query
        await query.answer()

        user_id = update.effective_user.id
        frequency = query.data.split("_")[1]  # daily –∏–ª–∏ weekly

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å—Ç–æ—Ç—É –≤ —Å–µ—Å—Å–∏–∏
        session_data = self.db.get_session_data(user_id)
        session_data['autopost_frequency'] = frequency
        self.db.save_session_data(user_id, session_data)

        if frequency == "weekly":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏
            keyboard = [
                [InlineKeyboardButton("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", callback_data="weekday_0")],
                [InlineKeyboardButton("–í—Ç–æ—Ä–Ω–∏–∫", callback_data="weekday_1")],
                [InlineKeyboardButton("–°—Ä–µ–¥–∞", callback_data="weekday_2")],
                [InlineKeyboardButton("–ß–µ—Ç–≤–µ—Ä–≥", callback_data="weekday_3")],
                [InlineKeyboardButton("–ü—è—Ç–Ω–∏—Ü–∞", callback_data="weekday_4")],
                [InlineKeyboardButton("–°—É–±–±–æ—Ç–∞", callback_data="weekday_5")],
                [InlineKeyboardButton("–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", callback_data="weekday_6")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="auto_posting")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            pub_type = session_data.get('publication_type', 'advertisement')
            typecal_text = "–¥–æ–ª–∂–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è —Ä–µ–∫–ª–∞–º–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ" if pub_type == 'advertisement' else "–¥–æ–ª–∂–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–µ"
            await query.edit_message_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤ –∫–æ—Ç–æ—Ä—ã–π {typecal_text}:",
                reply_markup=reply_markup
            )
            self.db.update_user_state(user_id, UserState.CHOOSING_WEEKDAY.value)
        else:
            # –î–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –≤—Ä–µ–º–µ–Ω–∏
            await self.ask_for_time(query, context)

    async def process_weekday_choice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
        query = update.callback_query
        await query.answer()

        user_id = update.effective_user.id
        weekday = int(query.data.split("_")[1])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤ —Å–µ—Å—Å–∏–∏
        session_data = self.db.get_session_data(user_id)
        session_data['autopost_weekday'] = weekday
        self.db.save_session_data(user_id, session_data)

        await self.ask_for_time(query, context)

    async def ask_for_time(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="auto_posting")]]
        reply_markup = InlineKeyboardMarkup(keyboard)


        user_id = query.from_user.id
        self.db.update_user_state(user_id, UserState.ENTERING_TIME.value)

        session_data = self.db.get_session_data(user_id)
        pub_type = session_data.get('publication_type', 'advertisement')
        typecal_text = "–¥–æ–ª–∂–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è —Ä–µ–∫–ª–∞–º–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ" if pub_type == 'advertisement' else "–¥–æ–ª–∂–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–µ"

        await query.edit_message_text(
        f"–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –∫–æ—Ç–æ—Ä–æ–µ {typecal_text} –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú",
        reply_markup=reply_markup
    )



    async def back_to_time_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –≤—Ä–µ–º–µ–Ω–∏"""
        query = update.callback_query
        await query.answer()

        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="auto_posting")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        user_id = update.effective_user.id
        self.db.update_user_state(user_id, UserState.ENTERING_TIME.value)

        session_data = self.db.get_session_data(user_id)
        pub_type = session_data.get('publication_type', 'advertisement')
        typecal_text = "–¥–æ–ª–∂–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è —Ä–µ–∫–ª–∞–º–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ" if pub_type == 'advertisement' else "–¥–æ–ª–∂–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–µ"

        await query.edit_message_text(
            f"–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –∫–æ—Ç–æ—Ä–æ–µ {typecal_text} –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú",
            reply_markup=reply_markup
        )

    async def process_time_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏"""
        user_id = update.effective_user.id
        time_text = update.message.text.strip()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
        if not FORMATS["time"].match(time_text):
            await update.message.reply_text(
                MESSAGES["invalid_time_format"]
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤ —Å–µ—Å—Å–∏–∏
        session_data = self.db.get_session_data(user_id)
        session_data['autopost_time'] = time_text
        self.db.save_session_data(user_id, session_data)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        pub_type = session_data.get('publication_type', 'advertisement')
        balance = self.db.get_user_balance(user_id)

        # –ü—Ä–æ–±—É—é –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –≤ —Ç–µ–∫—Å—Ç –î–Ω–µ–π, –Ω–µ–¥–µ–ª—å –∏ –æ–±—å—è–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—É
        daynedel = session_data.get('autopost_frequency')
        if session_data.get('autopost_weekday') == 0:
            kogda_text = "–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"
        else:
            if session_data.get('autopost_weekday') == 1:
                kogda_text = "–≤–æ –≤—Ç–æ—Ä–Ω–∏–∫"
            else:
                if session_data.get('autopost_weekday') == 2:
                    kogda_text = "–≤ —Å—Ä–µ–¥—É"
                else:
                    if session_data.get('autopost_weekday') == 3:
                        kogda_text = "–≤ —á–µ—Ç–≤–µ—Ä–≥"
                    else:
                        if session_data.get('autopost_weekday') == 4:
                            kogda_text = "–≤ –ø—è—Ç–Ω–∏—Ü—É"
                        else:
                            if session_data.get('autopost_weekday') == 5:
                                kogda_text = "–≤ —Å—É–±–±–æ—Ç—É"
                            else:
                                if session_data.get('autopost_weekday') == 6:
                                    kogda_text = "–≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
        publication_text = "–¥–æ–ª–∂–Ω–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è —Ä–µ–∫–ª–∞–º–∞" if pub_type == "advertisement" else "–¥–æ–ª–∂–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"


        if pub_type == 'advertisement':
            pricing_text = """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –†–µ–∫–ª–∞–º—ã –Ω–∞ –ø–ª–∞—Ç–Ω–æ–π –æ—Å–Ω–æ–≤–µ.
1 —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ - 160 ‚ÇΩ

–¢–∞–∫–∂–µ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å 20% —Å–∫–∏–¥–∫–æ–π:
2 —Ä–∞–∑–º–µ—â–µ–Ω–∏—è - 256 ‚ÇΩ (–≤–º–µ—Å—Ç–æ 320 ‚ÇΩ)
3 —Ä–∞–∑–º–µ—â–µ–Ω–∏—è - 384 ‚ÇΩ (–≤–º–µ—Å—Ç–æ 480 ‚ÇΩ)
5 —Ä–∞–∑–º–µ—â–µ–Ω–∏–π - 640 ‚ÇΩ (–≤–º–µ—Å—Ç–æ 800 ‚ÇΩ)
7 —Ä–∞–∑–º–µ—â–µ–Ω–∏–π - 896 ‚ÇΩ (–≤–º–µ—Å—Ç–æ 1120 ‚ÇΩ)
10 —Ä–∞–∑–º–µ—â–µ–Ω–∏–π - 1280 ‚ÇΩ (–≤–º–µ—Å—Ç–æ 1600 ‚ÇΩ)
15 —Ä–∞–∑–º–µ—â–µ–Ω–∏–π - 1920 ‚ÇΩ (–≤–º–µ—Å—Ç–æ 2400 ‚ÇΩ)
30 —Ä–∞–∑–º–µ—â–µ–Ω–∏–π - 3840‚ÇΩ (–≤–º–µ—Å—Ç–æ 4800 ‚ÇΩ)"""
        else:
            pricing_text = """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –ø–ª–∞—Ç–Ω–æ–π –æ—Å–Ω–æ–≤–µ.
1 —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ - 100 ‚ÇΩ

–¢–∞–∫–∂–µ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å 20% —Å–∫–∏–¥–∫–æ–π:
2 –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ - 160‚ÇΩ (–≤–º–µ—Å—Ç–æ 200‚ÇΩ)
3 –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ - 240 ‚ÇΩ (–≤–º–µ—Å—Ç–æ 300 ‚ÇΩ)
5 –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ - 400 ‚ÇΩ (–≤–º–µ—Å—Ç–æ 500 ‚ÇΩ)
7 –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ - 560 ‚ÇΩ (–≤–º–µ—Å—Ç–æ 700 ‚ÇΩ)
10 –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ - 800 ‚ÇΩ (–≤–º–µ—Å—Ç–æ 1000 ‚ÇΩ)
15 –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ - 1200 ‚ÇΩ (–≤–º–µ—Å—Ç–æ 1500 ‚ÇΩ)
30 –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ - 2400 ‚ÇΩ (–≤–º–µ—Å—Ç–æ 3000 ‚ÇΩ)"""

        if daynedel == "daily":
            text = f"–í–∞—à –±–∞–ª–∞–Ω—Å: {int(balance)} —Ä—É–±–ª–µ–π. –í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ {publication_text}  \n\n{pricing_text}"
        else:
            text = f"–í–∞—à –±–∞–ª–∞–Ω—Å: {int(balance)} —Ä—É–±–ª–µ–π. –í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—å –ø–æ–¥—Ä—è–¥ —Ä–∞–∑ {kogda_text} {publication_text}  \n\n{pricing_text}"

        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_time_input")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(text, reply_markup=reply_markup)
        self.db.update_user_state(user_id, UserState.ENTERING_REPETITIONS.value)

    async def back_to_repetitions_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π"""
        query = update.callback_query
        await query.answer()

        user_id = update.effective_user.id
        session_data = self.db.get_session_data(user_id)
        pub_type = session_data.get('publication_type', 'advertisement')
        balance = self.db.get_user_balance(user_id)

        # –ü—Ä–æ–±—É—é –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –≤ —Ç–µ–∫—Å—Ç –î–Ω–µ–π, –Ω–µ–¥–µ–ª—å –∏ –æ–±—å—è–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—É
        daynedel = session_data.get('autopost_frequency')
        if session_data.get('autopost_weekday') == 0:
            kogda_text = "–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"
        else:
            if session_data.get('autopost_weekday') == 1:
                kogda_text = "–≤–æ –≤—Ç–æ—Ä–Ω–∏–∫"
            else:
                if session_data.get('autopost_weekday') == 2:
                    kogda_text = "–≤ —Å—Ä–µ–¥—É"
                else:
                    if session_data.get('autopost_weekday') == 3:
                        kogda_text = "–≤ —á–µ—Ç–≤–µ—Ä–≥"
                    else:
                        if session_data.get('autopost_weekday') == 4:
                            kogda_text = "–≤ –ø—è—Ç–Ω–∏—Ü—É"
                        else:
                            if session_data.get('autopost_weekday') == 5:
                                kogda_text = "–≤ —Å—É–±–±–æ—Ç—É"
                            else:
                                if session_data.get('autopost_weekday') == 6:
                                    kogda_text = "–≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
        publication_text = "–¥–æ–ª–∂–Ω–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è —Ä–µ–∫–ª–∞–º–∞" if pub_type == "advertisement" else "–¥–æ–ª–∂–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"

        if pub_type == 'advertisement':
            pricing_text = """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –†–µ–∫–ª–∞–º—ã –Ω–∞ –ø–ª–∞—Ç–Ω–æ–π –æ—Å–Ω–æ–≤–µ.
1 —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ - 160 ‚ÇΩ

–¢–∞–∫–∂–µ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å 20% —Å–∫–∏–¥–∫–æ–π:
2 —Ä–∞–∑–º–µ—â–µ–Ω–∏—è - 256 ‚ÇΩ (–≤–º–µ—Å—Ç–æ 320 ‚ÇΩ)
3 —Ä–∞–∑–º–µ—â–µ–Ω–∏—è - 384 ‚ÇΩ (–≤–º–µ—Å—Ç–æ 480 ‚ÇΩ)
5 —Ä–∞–∑–º–µ—â–µ–Ω–∏–π - 640 ‚ÇΩ (–≤–º–µ—Å—Ç–æ 800 ‚ÇΩ)
7 —Ä–∞–∑–º–µ—â–µ–Ω–∏–π - 896 ‚ÇΩ (–≤–º–µ—Å—Ç–æ 1120 ‚ÇΩ)
10 —Ä–∞–∑–º–µ—â–µ–Ω–∏–π - 1280 ‚ÇΩ (–≤–º–µ—Å—Ç–æ 1600 ‚ÇΩ)
15 —Ä–∞–∑–º–µ—â–µ–Ω–∏–π - 1920 ‚ÇΩ (–≤–º–µ—Å—Ç–æ 2400 ‚ÇΩ)
30 —Ä–∞–∑–º–µ—â–µ–Ω–∏–π - 3840‚ÇΩ (–≤–º–µ—Å—Ç–æ 4800 ‚ÇΩ)"""
        else:
            pricing_text = """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –ø–ª–∞—Ç–Ω–æ–π –æ—Å–Ω–æ–≤–µ.
1 —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ - 100 ‚ÇΩ

–¢–∞–∫–∂–µ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å 20% —Å–∫–∏–¥–∫–æ–π:
2 –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ - 160‚ÇΩ (–≤–º–µ—Å—Ç–æ 200‚ÇΩ)
3 –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ - 240 ‚ÇΩ (–≤–º–µ—Å—Ç–æ 300 ‚ÇΩ)
5 –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ - 400 ‚ÇΩ (–≤–º–µ—Å—Ç–æ 500 ‚ÇΩ)
7 –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ - 560 ‚ÇΩ (–≤–º–µ—Å—Ç–æ 700 ‚ÇΩ)
10 –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ - 800 ‚ÇΩ (–≤–º–µ—Å—Ç–æ 1000 ‚ÇΩ)
15 –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ - 1200 ‚ÇΩ (–≤–º–µ—Å—Ç–æ 1500 ‚ÇΩ)
30 –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ - 2400 ‚ÇΩ (–≤–º–µ—Å—Ç–æ 3000 ‚ÇΩ)"""

        if daynedel == "daily":
            text = f"–í–∞—à –±–∞–ª–∞–Ω—Å: {int(balance)} —Ä—É–±–ª–µ–π. –í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ {publication_text}  \n\n{pricing_text}"
        else:
            text = f"–í–∞—à –±–∞–ª–∞–Ω—Å: {int(balance)} —Ä—É–±–ª–µ–π. –í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—å –ø–æ–¥—Ä—è–¥ —Ä–∞–∑ {kogda_text} {publication_text}  \n\n{pricing_text}"


        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_time_input")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(text, reply_markup=reply_markup)
        self.db.update_user_state(user_id, UserState.ENTERING_REPETITIONS.value)

    async def process_repetitions_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        repetitions_text = update.message.text.strip()

        try:
            repetitions = int(repetitions_text)
            if repetitions < 1 or repetitions > 30:
                raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 30")
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 30."
            )
            return

        session_data = self.db.get_session_data(user_id)
        pub_type = session_data.get('publication_type', 'advertisement')

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –ø–∞–∫–µ—Ç–Ω—ã—Ö —Å–∫–∏–¥–æ–∫
        pricing_key = "advertisement" if pub_type == 'advertisement' else "job"
        if repetitions in PACKAGE_PRICING[pricing_key]:
            total_cost = PACKAGE_PRICING[pricing_key][repetitions]
        else:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É 20% –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ >= 2
            base_price = PACKAGE_PRICING[pricing_key][1]
            if repetitions >= 2:
                total_cost = base_price * repetitions * 0.8
            else:
                total_cost = base_price

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å (–µ—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω)
        if not self.db.is_user_admin(user_id):
            if not self.db.check_balance(user_id, total_cost):
                balance = self.db.get_user_balance(user_id)

                keyboard = [
                    [InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="back_to_repetitions")],
                    [InlineKeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data="menu_–º–∞–≥–∞–∑–∏–Ω")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await update.message.reply_text(
                    f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è —Ç–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π. "
                    f"–í–∞—à –±–∞–ª–∞–Ω—Å {int(balance)} —Ä—É–±–ª–µ–π. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª-–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π "
                    f"–∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω —á—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
                    reply_markup=reply_markup
                )
                return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥
        session_data['autopost_repetitions'] = repetitions
        session_data['autopost_cost'] = total_cost
        self.db.save_session_data(user_id, session_data)

        await self.schedule_autopost(update, context)

    async def schedule_autopost(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
        user_id = update.effective_user.id
        session_data = self.db.get_session_data(user_id)

        frequency = session_data.get('autopost_frequency')
        time_str = session_data.get('autopost_time')
        repetitions = session_data.get('autopost_repetitions')
        total_cost = session_data.get('autopost_cost')
        weekday = session_data.get('autopost_weekday')
        pub_type = session_data.get('publication_type', 'advertisement')

        # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ (–µ—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω)
        if not self.db.is_user_admin(user_id):
            self.db.update_balance(user_id, -total_cost)
            logger.info(f"–°–ø–∏—Å–∞–Ω–æ {total_cost} —Ä—É–±–ª–µ–π –∑–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ scheduler
        publication_text = self.format_publication_text(session_data)

        try:
            if self.scheduler:
                job_id = await self.scheduler.schedule_recurring_post(
                    user_id=user_id,
                    text=publication_text,
                    frequency=frequency,
                    time_str=time_str,
                    day_of_week=weekday,
                    repetitions=repetitions,
                    pub_type=pub_type
                )
                logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ —Å ID {job_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞: {e}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        frequency_text = "—Å—É—Ç–∫–∏" if frequency == "daily" else "–Ω–µ–¥–µ–ª—é"
        pub_type_text = "–í–∞—à–µ —Ä–µ–∫–ª–∞–º–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ" if pub_type == "advertisement" else "–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–µ"

        if session_data.get('autopost_weekday') == 0:
            kogda = "–∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"
        else:
            if session_data.get('autopost_weekday') == 1:
                kogda = "–∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–Ω–∏–∫"
            else:
                if session_data.get('autopost_weekday') == 2:
                    kogda = "–∫–∞–∂–¥—É—é —Å—Ä–µ–¥—É"
                else:
                    if session_data.get('autopost_weekday') == 3:
                        kogda = "–∫–∞–∂–¥—ã–π —á–µ—Ç–≤–µ—Ä–≥"
                    else:
                        if session_data.get('autopost_weekday') == 4:
                            kogda = "–∫–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É"
                        else:
                            if session_data.get('autopost_weekday') == 5:
                                kogda = "–∫–∞–∂–¥—É—é —Å—É–±–±–æ—Ç—É"
                            else:
                                if session_data.get('autopost_weekday') == 6:
                                    kogda = "–∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"

        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if frequency == "daily":
            await update.message.reply_text(
                f"‚úÖ {pub_type_text} –±—É–¥–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è —Ä–∞–∑ –≤ {frequency_text}\n {repetitions} —Å—É—Ç–∫–∏(–æ–∫) –ø–æ–¥—Ä—è–¥ –≤ {time_str}",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                f"‚úÖ {pub_type_text} –±—É–¥–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è —Ä–∞–∑ –≤ {frequency_text}\n {kogda} {repetitions} –Ω–µ–¥–µ–ª—å(–∏) –ø–æ–¥—Ä—è–¥ –≤ {time_str}",
                reply_markup=reply_markup
            )



        # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        self.db.clear_session_data(user_id)
        self.db.update_user_state(user_id, UserState.IDLE.value)

    # –û–¢–õ–û–ñ–ï–ù–ù–ê–Ø –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø - –ø–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
    async def delayed_publication(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞–º–∏"""
        query = update.callback_query
        await query.answer()

        user_id = update.effective_user.id
        session_data = self.db.get_session_data(user_id)
        pub_type = session_data.get('publication_type', 'advertisement')
        balance = self.db.get_user_balance(user_id)

        logger.info(f"–û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Ç–∏–ø: {pub_type}, –±–∞–ª–∞–Ω—Å: {balance}")

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –±–∞–ª–∞–Ω—Å—É —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        available_slots = []
        if self.db.is_user_admin(user_id):
            available_slots = [1, 2, 3]
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} - –∞–¥–º–∏–Ω, –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Å–ª–æ—Ç—ã")
        else:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –±–∞–ª–∞–Ω—Å–∞
            balance_requirements = DELAYED_BALANCE_REQUIREMENTS.get(pub_type, DELAYED_BALANCE_REQUIREMENTS['job'])

            if balance >= balance_requirements[3]:
                available_slots = [1, 2, 3]
            elif balance >= balance_requirements[2]:
                available_slots = [1, 2]
            elif balance >= balance_requirements[1]:
                available_slots = [1]

            logger.info(f"–î–ª—è —Ç–∏–ø–∞ {pub_type} –ø—Ä–∏ –±–∞–ª–∞–Ω—Å–µ {balance} –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–æ—Ç—ã: {available_slots}")

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –∏–∑ —Å–µ—Å—Å–∏–∏
        delayed_slots = session_data.get('delayed_slots', {})

        keyboard = []

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        for slot_num in range(1, 4):
            if slot_num in available_slots:
                slot_text = delayed_slots.get(f'slot_{slot_num}', '')
                if slot_text:
                    button_text = f"–ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è {slot_num} - {slot_text}"
                else:
                    button_text = f"–ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è {slot_num}"
                keyboard.append([InlineKeyboardButton(button_text, callback_data=f"delayed_slot_{slot_num}")])

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="review_publication")])

        # –ö–Ω–æ–ø–∫–∞ "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å" –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Å–ª–æ—Ç
        if delayed_slots:
            keyboard.append([InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="confirm_delayed_publication")])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
            reply_markup=reply_markup
        )

        self.db.update_user_state(user_id, UserState.CHOOSING_DELAYED_SLOT.value)

    async def process_delayed_slot_choice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–æ—Ç–∞ –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        query = update.callback_query
        await query.answer()

        user_id = update.effective_user.id
        slot_num = int(query.data.split("_")[-1])

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Å–ª–æ—Ç {slot_num}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
        session_data = self.db.get_session_data(user_id)
        session_data['current_delayed_slot'] = slot_num
        self.db.save_session_data(user_id, session_data)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤—Ä–µ–º—è –≤ —ç—Ç–æ–º —Å–ª–æ—Ç–µ
        delayed_slots = session_data.get('delayed_slots', {})
        current_time = delayed_slots.get(f'slot_{slot_num}', '')

        keyboard = [
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="delayed_publication")]
        ]

        if current_time:
            keyboard.insert(0, [
                InlineKeyboardButton("üóëÔ∏è –£–±—Ä–∞—Ç—å —Å –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏", callback_data=f"remove_delayed_slot_{slot_num}")])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "–ü—Ä–∏—à–ª–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º",
            reply_markup=reply_markup
        )

        self.db.update_user_state(user_id, UserState.ENTERING_DELAYED_DATETIME.value)

    async def process_delayed_datetime_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        user_id = update.effective_user.id
        datetime_text = update.message.text.strip()

        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ '{datetime_text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
        if not FORMATS["datetime"].match(datetime_text):
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {datetime_text}")
            keyboard = [
                [InlineKeyboardButton("‚úèÔ∏è –í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data="retry_datetime_input")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="delayed_publication")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                MESSAGES["invalid_datetime_format"],
                reply_markup=reply_markup
            )
            return

        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
            date_part, time_part = datetime_text.split(' ')
            day, month, year = map(int, date_part.split('.'))
            hour, minute = map(int, time_part.split(':'))

            scheduled_datetime = datetime(year, month, day, hour, minute)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
            if scheduled_datetime <= datetime.now():
                await update.message.reply_text(
                    "‚ùå –£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
                return

            logger.info(f"–î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: {scheduled_datetime}")

        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã {datetime_text}: {e}")
            keyboard = [
                [InlineKeyboardButton("‚úèÔ∏è –í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data="retry_datetime_input")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="delayed_publication")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                MESSAGES["invalid_datetime_format"],
                reply_markup=reply_markup
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–ª–æ—Ç
        session_data = self.db.get_session_data(user_id)
        slot_num = session_data.get('current_delayed_slot', 1)

        if 'delayed_slots' not in session_data:
            session_data['delayed_slots'] = {}

        session_data['delayed_slots'][f'slot_{slot_num}'] = datetime_text
        self.db.save_session_data(user_id, session_data)

        logger.info(f"–í—Ä–µ–º—è {datetime_text} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Å–ª–æ—Ç {slot_num}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–ª–æ—Ç–æ–≤
        await self.delayed_publication(update, context)

    async def retry_datetime_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
        query = update.callback_query
        await query.answer()

        user_id = update.effective_user.id
        session_data = self.db.get_session_data(user_id)
        slot_num = session_data.get('current_delayed_slot', 1)

        keyboard = [
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="delayed_publication")],
            [InlineKeyboardButton("üóëÔ∏è –£–±—Ä–∞—Ç—å —Å –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏", callback_data=f"remove_delayed_slot_{slot_num}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "–ü—Ä–∏—à–ª–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º",
            reply_markup=reply_markup
        )

        self.db.update_user_state(user_id, UserState.ENTERING_DELAYED_DATETIME.value)

    async def remove_delayed_slot(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Å–ª–æ—Ç–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        query = update.callback_query
        await query.answer()

        user_id = update.effective_user.id
        slot_num = int(query.data.split("_")[-1])

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º—è –∏–∑ —Å–ª–æ—Ç–∞
        session_data = self.db.get_session_data(user_id)
        delayed_slots = session_data.get('delayed_slots', {})

        if f'slot_{slot_num}' in delayed_slots:
            del delayed_slots[f'slot_{slot_num}']
            session_data['delayed_slots'] = delayed_slots
            self.db.save_session_data(user_id, session_data)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–ª–æ—Ç–æ–≤
        await self.delayed_publication(update, context)

    async def confirm_delayed_publication(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        query = update.callback_query
        await query.answer()

        user_id = update.effective_user.id
        session_data = self.db.get_session_data(user_id)
        pub_type = session_data.get('publication_type', 'advertisement')
        delayed_slots = session_data.get('delayed_slots', {})

        if not delayed_slots:
            await query.edit_message_text(
                "‚ùå –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="delayed_publication")
                ]])
            )
            return

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        num_slots = len(delayed_slots)

        # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–ª–æ—Ç–æ–≤
        if pub_type == 'advertisement':
            if num_slots == 1:
                cost = 160
            elif num_slots == 2:
                cost = 256
            else:  # num_slots == 3
                cost = 384
        else:  # job_offer –∏–ª–∏ job_search
            if num_slots == 1:
                cost = 100
            elif num_slots == 2:
                cost = 160
            else:  # num_slots == 3
                cost = 240

        logger.info(f"–°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {cost} –∑–∞ {num_slots} —Å–ª–æ—Ç–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å (–µ—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω)
        if not self.db.is_user_admin(user_id):
            if not self.db.check_balance(user_id, cost):
                await query.edit_message_text(
                    f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è: {cost} —Ä—É–±–ª–µ–π",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üõí –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="menu_–º–∞–≥–∞–∑–∏–Ω")
                    ]])
                )
                return

            # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
            self.db.update_balance(user_id, -cost)
            logger.info(f"–°–ø–∏—Å–∞–Ω–æ {cost} —Ä—É–±–ª–µ–π –∑–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        publication_text = self.format_publication_text(session_data)
        scheduled_list = []

        for slot_key, datetime_str in delayed_slots.items():
            slot_num = slot_key.split('_')[1]

            try:
                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                date_part, time_part = datetime_str.split(' ')
                day, month, year = map(int, date_part.split('.'))
                hour, minute = map(int, time_part.split(':'))
                scheduled_datetime = datetime(year, month, day, hour, minute)

                # –ü–ª–∞–Ω–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ scheduler
                if self.scheduler:
                    job_id = await self.scheduler.schedule_single_post(
                        user_id=user_id,
                        text=publication_text,
                        scheduled_time=scheduled_datetime,
                        pub_type=pub_type
                    )
                    logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å ID {job_id}")

                scheduled_list.append(f"{slot_num}) {datetime_str}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        pub_type_text = "—Ä–µ–∫–ª–∞–º–∞" if pub_type == 'advertisement' else "–æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
        schedule_text = "\n".join(scheduled_list)

        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            f"‚úÖ –í–∞—à–∞ {pub_type_text} –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞:\n{schedule_text}",
            reply_markup=reply_markup
        )

        # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        self.db.clear_session_data(user_id)
        self.db.update_user_state(user_id, UserState.IDLE.value)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    async def handle_insufficient_balance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞"""
        query = update.callback_query
        await query.answer()

        keyboard = [
            [InlineKeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data="menu_–º–∞–≥–∞–∑–∏–Ω")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.",
            reply_markup=reply_markup
        )

    async def _send_error_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE, error_text: str = None):
        """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö"""
        text = error_text or ERROR_MESSAGES["general_error"]

        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        try:
            if update.callback_query:
                await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
            else:
                await update.message.reply_text(text, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")

    def _get_image_path_for_publication(self, pub_type: str) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

        Args:
            pub_type: –¢–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

        Returns:
            str: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        if pub_type == "advertisement":
            return "picture/reklama.jpg"
        elif pub_type == "job_offer":
            return "picture/gotovoe_poisk_rabotnikov.jpg"
        elif pub_type == "job_search":
            return "picture/gotovoe_poisk_vakansiy.jpg"
        else:
            # –ï—Å–ª–∏ —Ç–∏–ø –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∫–ª–∞–º—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            return "picture/reklama.jpg"

    def format_publication_text(self, session_data: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        pub_type = session_data.get('publication_type')

        if pub_type == 'advertisement':
            return f"""üì¢ {session_data.get('firm_type', '')} "{session_data.get('firm_name', '')}"

{session_data.get('ad_text', '')}

üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {session_data.get('contacts', '')}

–•–æ—á–µ—à—å —Ç–æ–∂–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —Ä–µ–∫–ª–∞–º—É –≤ –≥—Ä—É–ø–ø—É?
–ü–∏—à–∏ @RABOTA100_150_BOT"""

        elif pub_type == 'job_offer':
            return f"""üíº {session_data.get('firm_type', '')} "{session_data.get('firm_name', '')}"

üéØ –í–∞–∫–∞–Ω—Å–∏—è: {session_data.get('job_title', '')}
üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {session_data.get('worker_count', '')}
üìÖ –ü–µ—Ä–∏–æ–¥ —Ä–∞–±–æ—Ç—ã: {session_data.get('work_period', '')}
üè¢ –£—Å–ª–æ–≤–∏—è: {session_data.get('work_conditions', '')}
üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {session_data.get('requirements', '')}
üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {session_data.get('salary', '')}

üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {session_data.get('contacts', '')}

–•–æ—á–µ—à—å —Ç–æ–∂–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —Ä–µ–∫–ª–∞–º—É –≤ –≥—Ä—É–ø–ø—É?
–ü–∏—à–∏ @RABOTA100_150_BOT"""


        else:  # job_search
            return f"""üîç {session_data.get('firm_type', '')} "{session_data.get('firm_name', '')}"

üíº –ò—â—É —Ä–∞–±–æ—Ç—É: {session_data.get('job_title', '')}
üìÖ –ü–µ—Ä–∏–æ–¥: {session_data.get('work_period', '')}
üè¢ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ —É—Å–ª–æ–≤–∏—è: {session_data.get('work_conditions', '')}
üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é: {session_data.get('requirements', '')}
üí∞ –ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {session_data.get('salary', '')}

üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {session_data.get('contacts', '')}

–•–æ—á–µ—à—å —Ç–æ–∂–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —Ä–µ–∫–ª–∞–º—É –≤ –≥—Ä—É–ø–ø—É?
–ü–∏—à–∏ @RABOTA100_150_BOT"""
