# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª handlers/payment_handlers.py

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice, PreCheckoutQuery
from telegram.ext import ContextTypes
import logging

from database.db_manager import DatabaseManager
from config.settings import PACKAGE_PRICING, MESSAGES
from services.payment_service import PaymentService

logger = logging.getLogger(__name__)


class PaymentHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""

    def __init__(self, db_manager: DatabaseManager, payment_service: PaymentService):
        self.db = db_manager
        self.payment_service = payment_service

    async def shop_advertisement_scenario(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–∫—É–ø–∫–∏ —Ä–µ–∫–ª–∞–º—ã"""
        query = update.callback_query
        await query.answer()

        pricing_text = self._format_pricing_text("advertisement")
        text = f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å.\n\n{pricing_text}"

        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(text, reply_markup=reply_markup)

        user_id = update.effective_user.id
        self.db.update_user_state(user_id, "entering_payment_amount_ad")

    async def shop_job_scenario(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–∫—É–ø–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ —Ä–∞–±–æ—Ç–µ"""
        query = update.callback_query
        await query.answer()

        pricing_text = self._format_pricing_text("job")
        text = f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å.\n\n{pricing_text}"

        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(text, reply_markup=reply_markup)

        user_id = update.effective_user.id
        self.db.update_user_state(user_id, "entering_payment_amount_job")

    def _format_pricing_text(self, service_type: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å —Ü–µ–Ω–∞–º–∏"""
        if service_type == "advertisement":
            base_text = "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –†–µ–∫–ª–∞–º—ã –Ω–∞ –ø–ª–∞—Ç–Ω–æ–π –æ—Å–Ω–æ–≤–µ.\n1 —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ - 160 ‚ÇΩ\n\n"
            pricing = PACKAGE_PRICING["advertisement"]
            base_price = 160
        else:
            base_text = "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –ø–ª–∞—Ç–Ω–æ–π –æ—Å–Ω–æ–≤–µ.\n1 —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ - 100 ‚ÇΩ\n\n"
            pricing = PACKAGE_PRICING["job"]
            base_price = 100

        discount_text = "–¢–∞–∫–∂–µ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å 20% —Å–∫–∏–¥–∫–æ–π:\n"
        for count, price in pricing.items():
            if count > 1:
                original_price = count * base_price
                discount_text += f"{count} —Ä–∞–∑–º–µ—â–µ–Ω–∏—è - {price} ‚ÇΩ (–≤–º–µ—Å—Ç–æ {original_price} ‚ÇΩ)\n"

        return base_text + discount_text

    async def process_payment_amount(self, service_type: str, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞"""
        user_id = update.effective_user.id
        text = update.message.text

        try:
            amount = float(text)
            if amount <= 0:
                raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ."
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ —Å–µ—Å—Å–∏–∏
        session_data = self.db.get_session_data(user_id)
        session_data['payment_amount'] = amount
        self.db.save_session_data(user_id, session_data)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
        if service_type == "advertisement":
            keyboard = [
                [InlineKeyboardButton("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", callback_data=f"pay_{amount}")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="shop_advertisement")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
        else:
            keyboard = [
                [InlineKeyboardButton("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", callback_data=f"pay_{amount}")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="shop_job")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

        
        await update.message.reply_text(
            f"–û–ø–ª–∞—Ç–∞ {int(amount)} —Ä—É–±–ª–µ–π",
            reply_markup=reply_markup
        )

        self.db.update_user_state(user_id, "confirming_payment")

    async def initiate_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–Ω–∏—Ü–∏–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
        query = update.callback_query
        await query.answer()

        user_id = update.effective_user.id
        amount_str = query.data.split("_")[1]
        amount = float(amount_str)

        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        payment_id = self.db.create_payment(user_id, amount, "telegram_payments")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['payment_id'] = payment_id

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è Telegram Payments
        title = "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"
        description = f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {int(amount)} —Ä—É–±–ª–µ–π"
        payload = f"payment_{payment_id}"
        currency = "RUB"
        prices = [LabeledPrice("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞", int(amount * 100))]  # –í –∫–æ–ø–µ–π–∫–∞—Ö

        try:
            await context.bot.send_invoice(
                chat_id=user_id,
                title=title,
                description=description,
                payload=payload,
                provider_token=context.bot_data.get('payment_provider_token', ''),
                currency=currency,
                prices=prices,
                start_parameter="payment",
                is_flexible=False
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="main_menu")
                ]])
            )

    async def precheckout_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞"""
        query: PreCheckoutQuery = update.pre_checkout_query

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–∞
        if query.invoice_payload.startswith("payment_"):
            await query.answer(ok=True)
        else:
            await query.answer(
                ok=False,
                error_message="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –ø–ª–∞—Ç–µ–∂–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    async def successful_payment_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
        payment = update.message.successful_payment
        user_id = update.effective_user.id

        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ payload
        payment_id = int(payment.invoice_payload.split("_")[1])

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        success = self.db.complete_payment(payment_id, payment.telegram_payment_charge_id)

        if success:
            amount = payment.total_amount / 100  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –∫–æ–ø–µ–µ–∫
            balance = self.db.get_user_balance(user_id)

            response_text = MESSAGES["payment_success"].format(
                amount=int(amount),
                balance=int(balance)
            )

            keyboard = [[InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é", callback_data="main_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(response_text, reply_markup=reply_markup)

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.db.update_user_state(user_id, "idle")
            self.db.clear_session_data(user_id)
        else:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )

    async def failed_payment_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
        user_id = update.effective_user.id

        text = "–í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(text, reply_markup=reply_markup)

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.db.update_user_state(user_id, "idle")
